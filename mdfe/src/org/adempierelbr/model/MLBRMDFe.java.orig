/******************************************************************************
 * Copyright (C) 2011 Kenos Assessoria e Consultoria de Sistemas Ltda         *
 * Copyright (C) 2011 Ricardo Santana                                         *
 * This program is free software; you can redistribute it and/or modify it    *
 * under the terms version 2 of the GNU General Public License as published   *
 * by the Free Software Foundation. This program is distributed in the hope   *
 * that it will be useful, but WITHOUT ANY WARRANTY; without even the implied *
 * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.           *
 * See the GNU General Public License for more details.                       *
 * You should have received a copy of the GNU General Public License along    *
 * with this program; if not, write to the Free Software Foundation, Inc.,    *
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA.                     *
 *****************************************************************************/
package org.adempierelbr.model;

import java.io.File;
import java.io.Writer;
import java.math.BigDecimal;
import java.sql.ResultSet;
import java.sql.Timestamp;
import java.util.List;
import java.util.Properties;
import java.util.Random;

import javax.xml.bind.JAXBException;

import org.adempiere.exceptions.AdempiereException;
import org.adempiere.model.POWrapper;
import org.adempierelbr.mdfe.util.MDFeUtil;
import org.adempierelbr.nfe.beans.ChaveNFE;
import org.adempierelbr.process.MDFeRecepcao;
import org.adempierelbr.process.MDFeRegEvento;
import org.adempierelbr.process.MDFeRetRecepcao;
import org.adempierelbr.util.TextUtil;
import org.adempierelbr.util.ValidaXML;
import org.adempierelbr.wrapper.I_W_AD_OrgInfo;
import org.adempierelbr.wrapper.I_W_C_City;
import org.compiere.model.MAttachment;
import org.compiere.model.MCity;
import org.compiere.model.MOrgInfo;
import org.compiere.model.MRegion;
import org.compiere.model.MTable;
import org.compiere.model.ModelValidationEngine;
import org.compiere.model.ModelValidator;
import org.compiere.model.Query;
import org.compiere.process.DocAction;
import org.compiere.process.DocOptions;
import org.compiere.process.DocumentEngine;
import org.compiere.util.Env;
import org.compiere.util.Msg;

import br.inf.portalfiscal.mdfe.EvCancMDFe;
import br.inf.portalfiscal.mdfe.EvEncMDFe;
import br.inf.portalfiscal.mdfe.ObjectFactory;
import br.inf.portalfiscal.mdfe.Rodo;
import br.inf.portalfiscal.mdfe.Rodo.ValePed;
import br.inf.portalfiscal.mdfe.Rodo.ValePed.Disp;
import br.inf.portalfiscal.mdfe.Rodo.VeicReboque;
import br.inf.portalfiscal.mdfe.Rodo.VeicTracao;
import br.inf.portalfiscal.mdfe.Rodo.VeicTracao.Condutor;
import br.inf.portalfiscal.mdfe.Rodo.VeicTracao.Prop;
import br.inf.portalfiscal.mdfe.TEndeEmi;
import br.inf.portalfiscal.mdfe.TMDFe;
import br.inf.portalfiscal.mdfe.TMDFe.InfMDFe;
import br.inf.portalfiscal.mdfe.TMDFe.InfMDFe.Emit;
import br.inf.portalfiscal.mdfe.TMDFe.InfMDFe.Ide;
import br.inf.portalfiscal.mdfe.TMDFe.InfMDFe.Ide.InfMunCarrega;
import br.inf.portalfiscal.mdfe.TMDFe.InfMDFe.Ide.InfPercurso;
import br.inf.portalfiscal.mdfe.TMDFe.InfMDFe.InfAdic;
import br.inf.portalfiscal.mdfe.TMDFe.InfMDFe.InfDoc;
import br.inf.portalfiscal.mdfe.TMDFe.InfMDFe.InfDoc.InfMunDescarga;
import br.inf.portalfiscal.mdfe.TMDFe.InfMDFe.InfDoc.InfMunDescarga.InfCT;
import br.inf.portalfiscal.mdfe.TMDFe.InfMDFe.InfDoc.InfMunDescarga.InfCTe;
import br.inf.portalfiscal.mdfe.TMDFe.InfMDFe.InfDoc.InfMunDescarga.InfNF;
import br.inf.portalfiscal.mdfe.TMDFe.InfMDFe.InfDoc.InfMunDescarga.InfNFe;
import br.inf.portalfiscal.mdfe.TMDFe.InfMDFe.InfModal;
import br.inf.portalfiscal.mdfe.TMDFe.InfMDFe.Lacres;
import br.inf.portalfiscal.mdfe.TMDFe.InfMDFe.Tot;
import br.inf.portalfiscal.mdfe.TRetEvento;
import br.inf.portalfiscal.mdfe.TUf;

/**
 * 		Model for MDF-e
 * 
 * 	@author Ricardo Santana (Kenos, www.kenos.com.br)
 *	@version $Id: MLBRMDFe.java, v1.0 2014/01/28 5:09:44 PM, ralexsander Exp $
 */
public class MLBRMDFe extends X_LBR_MDFe implements DocAction, DocOptions
{	
	/**************************************************************************
	 *  Default Constructor
	 *  @param Properties ctx
	 *  @param int LBR_Tax_ID (0 create new)
	 *  @param String trx
	 */
	public MLBRMDFe (Properties ctx, int LBR_MDFe_ID, String trx)
	{
		super (ctx, LBR_MDFe_ID, trx);
	}	//	MLBRTax

	/**
	 *  Load Constructor
	 *  @param ctx context
	 *  @param rs result set record
	 *  @param trxName transaction
	 */
	public MLBRMDFe (Properties ctx, ResultSet rs, String trxName)
	{
		super (ctx, rs, trxName);
	}	//	MLBRTax

	/**	Process Message 			*/
	private String		m_processMsg = null;
	
	@Override
	public boolean processIt (String processAction) throws Exception
	{
		m_processMsg = null;
		//
		DocumentEngine engine = new DocumentEngine (this, getDocStatus());
		return engine.processIt (processAction, getDocAction());
	}
	
	/**
	 * 	Get Document Info
	 *	@return document info (untranslated)
	 */
	public String getDocumentInfo()
	{
		return getDocumentNo();
	}	//	getDocumentInfo
	
	/**
	 * 	Create PDF file
	 *	@param file output file
	 *	@return file if success
	 */
	public File createPDF ()
	{
		return null;
	}	//	createPDF

	/**
	 * 	Unlock Document.
	 * 	@return true if success 
	 */
	public boolean unlockIt()
	{
		log.info("unlockIt - " + toString());
		return true;
	}	//	unlockIt
	
	/**
	 * 	Invalidate Document
	 * 	@return true if success 
	 */
	public boolean invalidateIt()
	{
		log.info("invalidateIt - " + toString());
		return true;
	}	//	invalidateIt
	
	/**
	 *	Prepare Document
	 * 	@return new status (In Progress or Invalid) 
	 */
	public String prepareIt()
	{
		log.info(toString());
		m_processMsg = ModelValidationEngine.get().fireDocValidate(this, ModelValidator.TIMING_BEFORE_PREPARE);
		if (m_processMsg != null)
			return DocAction.STATUS_Invalid;
		
		m_processMsg = ModelValidationEngine.get().fireDocValidate(this, ModelValidator.TIMING_AFTER_PREPARE);
		if (m_processMsg != null)
			return DocAction.STATUS_Invalid;

		return DocAction.STATUS_InProgress;
	}	//	prepareIt
	
	/**
	 * 	Approve Document
	 * 	@return true if success 
	 */
	public boolean  approveIt()
	{
		log.info("approveIt - " + toString());
		return true;
	}	//	approveIt
	
	/**
	 * 	Reject Approval
	 * 	@return true if success 
	 */
	public boolean rejectIt()
	{
		log.info("rejectIt - " + toString());
		return true;
	}	//	rejectIt
	
	/**
	 * 	Complete Document
	 * 	@return new status (Complete, In Progress, Invalid, Waiting ..)
	 */
	public String completeIt()
	{
		log.info(toString());
		
		try
		{
			if (DOCSTATUS_WaitingConfirmation.equals (getDocStatus()))
				MDFeRetRecepcao.processReturn (this);
				
			else if (TextUtil.match (getDocStatus(), DOCSTATUS_NotApproved, DOCSTATUS_Drafted, DOCSTATUS_InProgress, DOCSTATUS_Invalid))
				MDFeRecepcao.sendDocument (this);
		}
		catch (Exception e)
		{
			e.printStackTrace();
			m_processMsg = e.getMessage();
			//
			return getDocStatus();
		}

		return getDocStatus();
	}	//	completeIt

	/**
	 * 	Void Document.
	 * 	Same as Close.
	 * 	@return true if success 
	 */
	public boolean voidIt()
	{
		log.info("voidIt - " + toString());
		
		if (!DOCSTATUS_Completed.equals(getDocStatus()))
		{
			m_processMsg = "Estado do documento inválido";
			return false;
		}
		
		String motivoCanc = getlbr_MotivoCancel();

		if (motivoCanc == null)
			throw new AdempiereException ("Sem motivo de cancelamento");
		
		else if (motivoCanc.length() < 16)
			throw new AdempiereException ("Motivo de cancelamento muito curto. Min: 15 letras.");
		
		if (getlbr_NFeProt () == null || getlbr_NFeProt ().isEmpty())
			throw new AdempiereException ("Protocolo do MDF-e não encontrado");
		
		ObjectFactory factory = new ObjectFactory ();
		//
		EvCancMDFe canc = factory.createEvCancMDFe ();
		canc.setDescEvento ("Cancelamento");
		canc.setNProt (getlbr_NFeProt ());
		canc.setXJust (TextUtil.retiraEspecial (motivoCanc.trim ()));
		
		try
		{
			TRetEvento ret = MDFeRegEvento.registerEvent (this, new Timestamp (System.currentTimeMillis()), MDFeUtil.EVENTO_CANCELAMENTO, 1, canc);
			//
			if (MDFeUtil.STATUS_EVENTO_VINCULADO.equals (ret.getInfEvento().getCStat()))
			{
				setDocAction(DOCACTION_None);
				setlbr_NFeStatus(MDFeUtil.STATUS_CANCELADO);
				setlbr_NFeAnswerStatus (MDFeUtil.STATUS_CANCELADO + "-Cancelamento do MDF-e Homologado (" + ret.getInfEvento().getNProt() + " " + MDFeUtil.formatTime (ret.getInfEvento().getDhRegEvento()) + ")");
				
				Writer w = MDFeUtil.marshall (factory.createRetEventoMDFe(ret));
				
				//	Add Attachment Entry
				MAttachment attachment = createAttachment (true);
				//
				attachment.addEntry (new File (TextUtil.generateTmpFile (w.toString(), ret.getInfEvento().getChMDFe() + "-env.xml")));
				attachment.save();
			}
			else
				throw new AdempiereException (ret.getInfEvento().getCStat() + "-" + ret.getInfEvento().getXMotivo());
		}
		catch (Exception e)
		{
			e.printStackTrace();
			//
			m_processMsg = "@Error@ " + e.getMessage();
			return false;
		}
		
		return true;
	}	//	voidIt
	
	/**
	 * 	Close Document.
	 * 	Cancel not delivered Qunatities
	 * 	@return true if success 
	 */
	public boolean closeIt()
	{
		log.info("closeIt - " + toString());
		
		if (!MDFeUtil.STATUS_AUTORIZADO.equals (getlbr_NFeStatus())
				|| !DOCSTATUS_Completed.equals(getDocStatus()))
		{
			m_processMsg = "Não é permitido fechar o documento neste estado, o documento deve estar autorizado primeiro.";
			return false;
		}
		
		if (getLBR_EndRegion_ID() <= 0 || getC_City_ID() <= 0)
		{
			m_processMsg = "Preencha o estado e cidade em que o Manifesto teve seu encerramento.";
			return false;
		}
		
		I_W_C_City city = POWrapper.create (new MCity (p_ctx, getC_City_ID(), null), I_W_C_City.class);
		
		ObjectFactory factory = new ObjectFactory ();
		//
		EvEncMDFe close = factory.createEvEncMDFe();
		close.setDescEvento ("Encerramento");
		close.setNProt (getlbr_NFeProt ());
		close.setDtEnc(MDFeUtil.formatDate (new Timestamp (System.currentTimeMillis ())));
		close.setCMun(Integer.toString (city.getlbr_CityCode()));
		close.setCUF(Integer.toString (city.getlbr_CityCode()).substring(0, 2));
		
		try
		{
			TRetEvento ret = MDFeRegEvento.registerEvent (this, new Timestamp (System.currentTimeMillis()), MDFeUtil.EVENTO_ENCERRAMENTO, 1, close);
			//
			if (MDFeUtil.STATUS_EVENTO_VINCULADO.equals (ret.getInfEvento().getCStat()))
			{
				setDocAction(DOCACTION_None);
				setlbr_NFeStatus(MDFeUtil.STATUS_ENCERRADO);
				setlbr_NFeAnswerStatus (MDFeUtil.STATUS_ENCERRADO + "-Encerramento do MDF-e Homologado (" + ret.getInfEvento().getNProt() + " " + MDFeUtil.formatTime (ret.getInfEvento().getDhRegEvento()) + ")");
				
				Writer w = MDFeUtil.marshall (factory.createRetEventoMDFe(ret));
				
				//	Add Attachment Entry
				MAttachment attachment = createAttachment (true);
				//
				attachment.addEntry (new File (TextUtil.generateTmpFile (w.toString(), ret.getInfEvento().getChMDFe() + "-env.xml")));
				attachment.save();
			}
			else
				throw new AdempiereException (ret.getInfEvento().getCStat() + "-" + ret.getInfEvento().getXMotivo());
		}
		catch (Exception e)
		{
			e.printStackTrace();
			//
			m_processMsg = "@Error@ " + e.getMessage();
			return false;
		}
		
		return true;
	}	//	closeIt
	
	/**
	 * 	Reverse Correction
	 * 	@return true if success 
	 */
	public boolean reverseCorrectIt()
	{
		log.info("reverseCorrectIt - " + toString());
		return false;
	}	//	reverseCorrectionIt
	
	/**
	 * 	Reverse Accrual - none
	 * 	@return true if success 
	 */
	public boolean reverseAccrualIt()
	{
		log.info("reverseAccrualIt - " + toString());
		return false;
	}	//	reverseAccrualIt
	
	/** 
	 * 	Re-activate
	 * 	@return true if success 
	 */
	public boolean reActivateIt()
	{
		log.info("reActivateIt - " + toString());

		if (reverseCorrectIt())
			return true;
		return false;
	}	//	reActivateIt
	
	/*************************************************************************
	 * 	Get Summary
	 *	@return Summary of Document
	 */
	public String getSummary()
	{
		return "";
	}	//	getSummary

	/**
	 * 	Get Process Message
	 *	@return clear text error message
	 */
	public String getProcessMsg()
	{
		return m_processMsg;
	}	//	getProcessMsg
	
	/**
	 * 	Get Document Owner (Responsible)
	 *	@return AD_User_ID
	 */
	public int getDoc_User_ID()
	{
		return 0;
	}	//	getDoc_User_ID

	/**
	 * 	Get Document Approval Amount
	 *	@return amount
	 */
	public BigDecimal getApprovalAmt()
	{
		return null;
	}	//	getApprovalAmt
	
	/**
	 * 	Get Document Currency
	 *	@return C_Currency_ID
	 */
	public int getC_Currency_ID()
	{
		return 0;
	}	//	getC_Currency_ID	
	
	/**
	 * 	Transform information to XML
	 * 	@return XML
	 * 	@throws JAXBException 
	 */
	public StringBuilder getXML () throws JAXBException
	{
		I_W_AD_OrgInfo oi = POWrapper.create(MOrgInfo.get (p_ctx, getAD_Org_ID(), get_TrxName()), I_W_AD_OrgInfo.class);
		
		if (oi.getC_Location_ID() == 0
				|| oi.getC_Location().getC_Region_ID() == 0)
			throw new AdempiereException ("Endereço da empresa inválido");
		
		ObjectFactory factory = new ObjectFactory ();
		
		I_W_C_City orgCity = POWrapper.create(new MCity (p_ctx, oi.getC_Location().getC_City_ID(), null), I_W_C_City.class);

		/**
		 * 	Identificação do MDF-e
		 */
		Ide ide = factory.createTMDFeInfMDFeIde();
		ide.setCUF ((""+orgCity.getlbr_CityCode()).substring(0,2));
		ide.setTpAmb (getlbr_NFeEnv ());
		ide.setTpEmit (getLBR_MDFeIssuerType ());
		ide.setMod (getlbr_NFModel ());
		ide.setSerie (getlbr_NFSerie ());
		ide.setNMDF (getDocumentNo ());
		
		Random random = new Random ();	//	Aleatório
		ide.setCMDF (TextUtil.lPad (random.nextInt (122674373), 8));
				
		/**
		 * 	Chave da MDF-e
		 */
		ChaveNFE key = new ChaveNFE();
		//
		key.setCUF((""+orgCity.getlbr_CityCode()).substring(0,2));	//	2-Código do Estado
		key.setAAMM(TextUtil.timeToString (getDateDoc(), "yyMM"));	//	4-Ano e Mês
		key.setCNPJ(TextUtil.toNumeric(oi.getlbr_CNPJ()));			//	14-CNPJ
		key.setMod(getlbr_NFModel());								//	2-Modelo
		key.setSerie(TextUtil.lPad(getlbr_NFSerie(), 3));			//	3-Série
		key.setNNF(TextUtil.lPad(getDocumentNo(), 9));				//	9-Número do Documento
		key.setTpEmis(getLBR_CommType());							//	1-Forma Emissão
		key.setCNF(ide.getCMDF());									//	8-Random
		
//		ide.setCDV (key.getDigito());
		ide.setModal (getLBR_ShipmentType ());
		ide.setDhEmi (MDFeUtil.formatTime (getDateDoc()));
		ide.setTpEmis (getLBR_CommType());
		ide.setProcEmi (MDFeUtil.EMISSAO_APLICATIVO_CONTRIB);
		ide.setVerProc (MDFeUtil.VERSION);
		ide.setUFIni (TUf.fromValue (getRegionBegin ()));
		ide.setUFFim (TUf.fromValue (getRegionEnd ()));
		
		/**
		 * 	Locais de Carregamento
		 */
		for (MLBRMDFeLoad load : getLoadPlaces())
		{
			I_W_C_City city = POWrapper.create(new MCity (p_ctx, load.getC_City_ID(), null), I_W_C_City.class);
			//
			InfMunCarrega mc = factory.createTMDFeInfMDFeIdeInfMunCarrega();
			mc.setCMunCarrega(""+city.getlbr_CityCode());
			mc.setXMunCarrega(city.getName());
			//
			ide.getInfMunCarrega().add(mc);
		}
		
		/**
		 * 	Rota, informando os estados em que a carga irá transitar
		 */
		for (MLBRMDFeRoute route : getRoute())
		{
			InfPercurso p = factory.createTMDFeInfMDFeIdeInfPercurso();
			//
			p.setUFPer(TUf.fromValue(route.getC_Region().getName()));
			ide.getInfPercurso().add(p);
		}
		
		/**
		 * 	Identificação do Emitente do Manifesto
		 */
		Emit emit = factory.createTMDFeInfMDFeEmit();
		emit.setCNPJ (TextUtil.toNumeric (oi.getlbr_CNPJ()));
		emit.setIE (TextUtil.retiraEspecial(oi.getlbr_IE()).replace(" ", ""));
		emit.setXNome(oi.getlbr_LegalEntity());
		emit.setXFant(oi.getlbr_Fantasia());
		
		/**
		 * 	Endereço
		 */
		TEndeEmi end = factory.createTEndeEmi();
		end.setXLgr (oi.getC_Location().getAddress1());
		end.setNro(oi.getC_Location().getAddress2());
		
		if (oi.getC_Location().getAddress4() != null && oi.getC_Location().getAddress4().length() > 0)
			end.setXCpl(oi.getC_Location().getAddress4());
		
		end.setXBairro(oi.getC_Location().getAddress3());
		
		I_W_C_City city = POWrapper.create(new MCity (p_ctx, oi.getC_Location().getC_City_ID(), null), I_W_C_City.class);
		
		end.setCMun(""+city.getlbr_CityCode());
		end.setXMun(city.getName());
		end.setCEP(TextUtil.toNumeric(oi.getC_Location().getPostal()));
		end.setUF(TUf.fromValue(oi.getC_Location().getRegionName()));
		
		if (oi.getPhone() != null && oi.getPhone().length() > 0)
			end.setFone(TextUtil.toNumeric(oi.getPhone()));
		
		if (oi.getEMail() != null && oi.getEMail().length() > 0)
			end.setEmail(oi.getEMail());
		
		emit.setEnderEmit(end);
		
		/**
		 * 	Informações do Modal (Aéreo, Rodoviário, Ferroviário ou Aquaviário)
		 */
		InfModal modal = factory.createTMDFeInfMDFeInfModal();
		modal.setVersaoModal(MDFeUtil.VERSION);
		
		//	Rodoviário
		if (LBR_SHIPMENTTYPE_Road.equals (getLBR_ShipmentType()))
		{
			Rodo rodo = factory.createRodo();
			rodo.setRNTRC(getLBR_RNTRC());
			rodo.setCIOT(getLBR_CIOT());
			
			MLBRMDFeVehicle vei = new MLBRMDFeVehicle (p_ctx, getLBR_MDFeVehicle_ID(), null); 
			
			//	Veículo da Tração
			VeicTracao vTr = factory.createRodoVeicTracao();
			vTr.setCInt(vei.getValue());
			vTr.setPlaca(vei.getlbr_BPShipperLicensePlate());
			vTr.setTara(TextUtil.bigdecimalToString (vei.getWeight(), 0));
			vTr.setTpRod(vei.getLBR_VehicleType());
			vTr.setTpCar(vei.getLBR_TruckType());
			vTr.setUF(TUf.fromValue (vei.getC_SalesRegion().getName()));
			
			if (vei.getLBR_VehicleSizeKG() != null && vei.getLBR_VehicleSizeKG().compareTo(Env.ZERO) == 1)
				vTr.setCapKG(TextUtil.bigdecimalToString (vei.getLBR_VehicleSizeKG(), 0));
			
			if (vei.getLBR_VehicleSizeM3() != null && vei.getLBR_VehicleSizeM3().compareTo(Env.ZERO) == 1)
				vTr.setCapM3(TextUtil.bigdecimalToString (vei.getLBR_VehicleSizeM3(), 0));
			
			if (vei.getLBR_RNTRC() != null && vei.getLBR_RNTRC().length() > 0)
			{
				Prop prop = factory.createRodoVeicTracaoProp();
				prop.setRNTRC(vei.getLBR_RNTRC());
				prop.setXNome(vei.getName());
				
				if (vei.getlbr_CNPJ() != null && vei.getlbr_CNPJ().length() > 0)
					prop.setCNPJ(TextUtil.toNumeric(vei.getlbr_CNPJ()));
				else
					prop.setCPF(TextUtil.toNumeric(vei.getlbr_CPF()));
				
				prop.setIE(vei.getlbr_IE());
				prop.setUF(TUf.fromValue (vei.getC_Region().getName()));
				prop.setTpProp(vei.getLBR_OwnerType());
				
				vTr.setProp(prop);
			}
			
			//	Condutores
			for (MLBRMDFeDriverInstance di : getDriver())
			{
				Condutor condutor = factory.createRodoVeicTracaoCondutor();
				condutor.setCPF(TextUtil.toNumeric(di.getLBR_MDFeDriver().getlbr_CPF()));
				condutor.setXNome(di.getLBR_MDFeDriver().getName());
				//
				vTr.getCondutor().add(condutor);
			}
			
			rodo.setVeicTracao(vTr);
			
			//	Preencher os veículos de Reboque (0 até 3)
			for (Integer LBR_MDFeTrailer_ID : new Integer[]{getLBR_MDFeTrailer1_ID(), 
					getLBR_MDFeTrailer2_ID(), getLBR_MDFeTrailer3_ID()})
			{
				if (LBR_MDFeTrailer_ID <= 0)
					continue;
				
				VeicReboque vr = factory.createRodoVeicReboque();
				//
				MLBRMDFeVehicle vei1 = new MLBRMDFeVehicle (p_ctx, LBR_MDFeTrailer_ID, null);
				//
				vr.setCInt(vei1.getValue());
				vr.setPlaca(vei1.getlbr_BPShipperLicensePlate());
				vr.setTara(TextUtil.bigdecimalToString (vei1.getWeight(), 0));
				vr.setTpCar(vei1.getLBR_TruckType());
				vr.setUF(TUf.fromValue (vei1.getC_SalesRegion().getName()));
				vr.setCapKG(TextUtil.bigdecimalToString (vei1.getLBR_VehicleSizeKG(), 0));
				
				if (vei1.getLBR_VehicleSizeM3() != null && vei1.getLBR_VehicleSizeM3().compareTo(Env.ZERO) == 1)
					vr.setCapM3(TextUtil.bigdecimalToString (vei1.getLBR_VehicleSizeM3(), 0));
				//
				if (vei1.getLBR_RNTRC() != null && vei1.getLBR_RNTRC().length() > 0)
				{
					Rodo.VeicReboque.Prop prop = factory.createRodoVeicReboqueProp();
					prop.setRNTRC(vei1.getLBR_RNTRC());
					vr.setProp(prop);
				}
				
				rodo.getVeicReboque().add(vr);
			}
			
			//	Vale Pedágio
			ValePed ped = factory.createRodoValePed();
			
			for (MLBRMDFeToll toll : getToll())
			{
				Disp disp = factory.createRodoValePedDisp();
				disp.setCNPJForn(TextUtil.toNumeric(toll.getlbr_BPCNPJ()));
				
				if (toll.getlbr_BPShipperCNPJ() != null
						&& toll.getlbr_BPShipperCNPJ().length() > 13)
					disp.setCNPJPg(TextUtil.toNumeric(toll.getlbr_BPShipperCNPJ()));
				
				if (toll.getPOReference() != null &&  TextUtil.toNumeric (toll.getPOReference()).length() > 0)
					disp.setNCompra(TextUtil.toNumeric (toll.getPOReference()));
				//
				ped.getDisp().add (disp);
			}
			
			if (ped.getDisp().size() > 0)
				rodo.setValePed(ped);
			
//	FIXME		ValidaXML.ValidaDocEx (MDFeUtil.marshall (rodo).toString (), MDFeUtil.XSD_VERSION + "/mdfeModalRodoviario_v1.00.xsd");
			
			modal.setAny (rodo);
		}
//		else if (LBR_SHIPMENTTYPE_Air.equals (getLBR_ShipmentType()))
//		{
//			//	TODO: Aéreo
//		}
//		else if (LBR_SHIPMENTTYPE_Marine.equals (getLBR_ShipmentType()))
//		{
//			//	Não disponível ainda
//		}
//		else if (LBR_SHIPMENTTYPE_Train.equals (getLBR_ShipmentType()))
//		{
//			//	TODO: Ferroviário
//		}
		else
			throw new AdempiereException ("Modalidade de Transporte não implementada: " + getLBR_ShipmentType());
		
		InfDoc doc = factory.createTMDFeInfMDFeInfDoc();
		
		/**
		 * 	Contadores
		 */
		int countCTe 	= 0;
		int countCT 	= 0;
		int countNFe 	= 0;
		int countNF 	= 0;
		
		/**
		 * 	Documento para Descarregamento
		 */
		for (MLBRMDFeUnload unload : getUnloadPlaces())
		{
			I_W_C_City unloadCity = POWrapper.create(new MCity (p_ctx, unload.getC_City_ID(), null), I_W_C_City.class);
			//
			InfMunDescarga desc = factory.createTMDFeInfMDFeInfDocInfMunDescarga(); 
			desc.setCMunDescarga(""+unloadCity.getlbr_CityCode());
			desc.setXMunDescarga(unloadCity.getName());
			
			//	CT-e
			for (MLBRMDFeUnloadDoc uDocument : unload.getUnloadDocs (MLBRMDFeUnloadDoc.LBR_MDFEDOCTYPE_CT_E))
			{
				InfCTe cte = factory.createTMDFeInfMDFeInfDocInfMunDescargaInfCTe();
				cte.setChCTe(uDocument.getlbr_NFeID());
				cte.setSegCodBarra(uDocument.getlbr_Barcode2());
				//
				desc.getInfCTe().add(cte);
				countCTe++;
			}
			
			//	CT
			for (MLBRMDFeUnloadDoc uDocument : unload.getUnloadDocs (MLBRMDFeUnloadDoc.LBR_MDFEDOCTYPE_CTPaper))
			{
				InfCT ct = factory.createTMDFeInfMDFeInfDocInfMunDescargaInfCT();
				ct.setNCT(uDocument.getlbr_NFeID());
				ct.setSerie(uDocument.getlbr_NFSerie());
				ct.setSubser(uDocument.getLBR_SubSerie());
				ct.setDEmi(TextUtil.timeToString(uDocument.getDateDoc()));
				ct.setVCarga(uDocument.getGrandTotal().toPlainString());
				//
				desc.getInfCT().add(ct);
				countCT++;
			}
			
			//	NF-e
			for (MLBRMDFeUnloadDoc uDocument : unload.getUnloadDocs (MLBRMDFeUnloadDoc.LBR_MDFEDOCTYPE_NF_E))
			{
				InfNFe nfe = factory.createTMDFeInfMDFeInfDocInfMunDescargaInfNFe();
				nfe.setChNFe(uDocument.getlbr_NFeID());
				nfe.setSegCodBarra(uDocument.getlbr_Barcode2());
				//
				desc.getInfNFe().add(nfe);
				countNFe++;
			}
			
			//	NF
			for (MLBRMDFeUnloadDoc uDocument : unload.getUnloadDocs (MLBRMDFeUnloadDoc.LBR_MDFEDOCTYPE_NFPaper))
			{
				InfNF nf = factory.createTMDFeInfMDFeInfDocInfMunDescargaInfNF();
				nf.setCNPJ(TextUtil.toNumeric(uDocument.getlbr_CNPJ()));
				nf.setUF(TUf.fromValue(uDocument.getC_Region().getName()));
				nf.setNNF(uDocument.getlbr_NFeID());
				nf.setSerie(uDocument.getlbr_NFSerie());
				nf.setDEmi(TextUtil.timeToString(uDocument.getDateDoc()));
				nf.setVNF(uDocument.getGrandTotal().toPlainString());
				nf.setPIN(uDocument.getPIN());
				//
				desc.getInfNF().add(nf);
				countNF++;
			}
			
			doc.getInfMunDescarga().add(desc);
		}
		
		//	Tatalizadores
		Tot tot = factory.createTMDFeInfMDFeTot();
		
		if (countCTe > 0)
			tot.setQCTe ("" + countCTe);
		
		if (countCT > 0)
			tot.setQCT  ("" + countCT);
		
		if (countNFe > 0)
			tot.setQNFe ("" + countNFe);
		
		if (countNF > 0)
			tot.setQNF  ("" + countNF);
		
		tot.setVCarga(TextUtil.bigdecimalToString (getGrandTotal()));
		tot.setCUnid(getLBR_WeightUOM());
		tot.setQCarga(TextUtil.bigdecimalToString (getWeight(), 4));
		
		InfAdic inf = null;
		
		if ((getDescription() != null && getDescription().length() > 0)
				|| (getlbr_NFDescription() != null && getlbr_NFDescription().length() > 0))
		{
			inf = factory.createTMDFeInfMDFeInfAdic();
			inf.setInfAdFisco(getDescription());
			inf.setInfCpl(getlbr_NFDescription());
		}
		
		/**
		 * 	Informações do MDF-e
		 */
		InfMDFe infMDFe = factory.createTMDFeInfMDFe();
		infMDFe.setVersao (MDFeUtil.VERSION);
		infMDFe.setId ("MDFe" + key.toString() + ide.getCDV());	//	Chave
		infMDFe.setIde (ide);
		infMDFe.setEmit(emit);
		infMDFe.setInfModal(modal);
		infMDFe.setInfDoc(doc);
		infMDFe.setTot(tot);
		infMDFe.setInfAdic(inf);
		
		/**
		 * 	Lacres
		 */
		for (MLBRMDFeSeal seal : getSeal())
		{
			Lacres lac = factory.createTMDFeInfMDFeLacres();
			lac.setNLacre(seal.getName());
			//
			infMDFe.getLacres().add(lac);
		}

		TMDFe tmdFe = factory.createTMDFe();
		tmdFe.setInfMDFe (infMDFe);
		
		Writer sw = MDFeUtil.marshall (factory.createMDFe (tmdFe));
		
		//	Retorno o XML gerado
		return new StringBuilder (sw.toString());
	}	//	getXML
	
	/**
	 * 	Get the Region Name of the route beginning
	 * 	@return UF
	 */
	private String getRegionBegin ()
	{
		if (getC_Region_ID() == 0)
			return "";
		MRegion region = new MRegion (getCtx(), getC_Region_ID(), get_TrxName());
		return region.getName();
	}	//	getRegionBegin
	
	/**
	 * 	Get the Region Name of the route ending
	 * 	@return UF
	 */
	private String getRegionEnd ()
	{
		if (getC_SalesRegion_ID() == 0)
			return "";
		MRegion region = new MRegion (getCtx(), getC_SalesRegion_ID(), get_TrxName());
		return region.getName();
	}	//	getRegionEnd
	
	/**
	 * 	Called before Save for Pre-Save Operation
	 * 	@param newRecord new record
	 *	@return true if record can be saved
	 */
	@Override
	protected boolean beforeSave (boolean newRecord)
	{
		if ((getLBR_MDFeVehicle_ID () > 0
				&& TextUtil.match (getLBR_MDFeVehicle_ID (), getLBR_MDFeTrailer1_ID(), getLBR_MDFeTrailer2_ID(), getLBR_MDFeTrailer3_ID())))
		{
			log.saveError ("Error", Msg.parseTranslation(getCtx(), "@LBR_MDFeVehicle_ID@ repetido como Veículo de Reboque"));
			return false;
		}
		
		if ((getLBR_MDFeTrailer1_ID () > 0
				&& TextUtil.match (getLBR_MDFeTrailer1_ID (), getLBR_MDFeTrailer2_ID(), getLBR_MDFeTrailer3_ID())))
		{
			log.saveError ("Error", Msg.parseTranslation(getCtx(), "@LBR_MDFeTrailer1_ID@ repetido. Verifique: @LBR_MDFeTrailer2_ID@ e @LBR_MDFeTrailer3_ID@"));
			return false;
		}
		
		if ((getLBR_MDFeTrailer2_ID () > 0
				&& TextUtil.match (getLBR_MDFeTrailer2_ID (), getLBR_MDFeTrailer3_ID())))
		{
			log.saveError ("Error", Msg.parseTranslation(getCtx(), "@LBR_MDFeTrailer2_ID@ repetido. Verifique @LBR_MDFeTrailer3_ID@"));
			return false;
		}
		
		//	Ajusta a UF de encerramento
		if (newRecord)
			setLBR_EndRegion_ID (getC_SalesRegion_ID ());
		
		return true;
	}	//	beforeSave
	
	/**
	 * 	Called after Save for Post-Save Operation
	 * 	@param newRecord new record
	 *	@param success true if save operation was success
	 *	@return if save was a success
	 */
	@Override
	protected boolean afterSave (boolean newRecord, boolean success)
	{
		if (newRecord && success && LBR_MDFEISSUERTYPE_Non_ShipperProvider.equals (getLBR_MDFeIssuerType()))
		{
			I_W_AD_OrgInfo oi = POWrapper.create(MOrgInfo.get (p_ctx, getAD_Org_ID(), get_TrxName()), I_W_AD_OrgInfo.class);
			//
			MLBRMDFeLoad load = new MLBRMDFeLoad (this);
			load.setC_Region_ID (oi.getC_Location().getC_Region_ID());
			load.setC_City_ID(oi.getC_Location().getC_City_ID());
			load.save();
		}
		return true;
	}	//	afterSave
	
	/**
	 *  Get Load Places
	 *  @return MLBRMDFeLoad[] lines
	 */
	public MLBRMDFeLoad[] getLoadPlaces ()
	{
		MTable table = MTable.get (getCtx(), MLBRMDFeLoad.Table_Name);
		Query query =  new Query (getCtx(), table, "LBR_MDFe_ID=?", get_TrxName());
	 		  query.setParameters(new Object[]{getLBR_MDFe_ID()});
	 	//
	 	List<MLBRMDFeLoad> list = query.list();
	 	return list.toArray(new MLBRMDFeLoad[list.size()]);
	}	//	getLoadPlaces
	
	
	/**
	 *  Get Unload Places
	 *  @return MLBRMDFeLoad[] lines
	 */
	public MLBRMDFeUnload[] getUnloadPlaces ()
	{
		MTable table = MTable.get (getCtx(), MLBRMDFeUnload.Table_Name);
		Query query =  new Query (getCtx(), table, "LBR_MDFe_ID=?", get_TrxName());
	 		  query.setParameters(new Object[]{getLBR_MDFe_ID()});
	 	//
	 	List<MLBRMDFeUnload> list = query.list();
	 	return list.toArray(new MLBRMDFeUnload[list.size()]);
	}	//	getUnloadPlaces

	/**
	 *  Get Route
	 *  @return MLBRMDFeRoute[] lines
	 */
	public MLBRMDFeRoute[] getRoute ()
	{
		MTable table = MTable.get (getCtx(), MLBRMDFeRoute.Table_Name);
		Query query =  new Query (getCtx(), table, "LBR_MDFe_ID=?", get_TrxName());
	 		  query.setParameters(new Object[]{getLBR_MDFe_ID()});
	 	//
	 	List<MLBRMDFeRoute> list = query.list();
	 	return list.toArray(new MLBRMDFeRoute[list.size()]);
	}	//	getRoute

	/**
	 *  Get Seal
	 *  @return MLBRMDFeSeal[] lines
	 */
	public MLBRMDFeSeal[] getSeal ()
	{
		MTable table = MTable.get (getCtx(), MLBRMDFeSeal.Table_Name);
		Query query =  new Query (getCtx(), table, "LBR_MDFe_ID=?", get_TrxName());
	 		  query.setParameters(new Object[]{getLBR_MDFe_ID()});
	 	//
	 	List<MLBRMDFeSeal> list = query.list();
	 	return list.toArray(new MLBRMDFeSeal[list.size()]);
	}	//	getSeal
	
	/**
	 *  Get Driver
	 *  @return MLBRMDFeDriver[] lines
	 */
	public MLBRMDFeDriverInstance[] getDriver ()
	{
		MTable table = MTable.get (getCtx(), MLBRMDFeDriverInstance.Table_Name);
		Query query =  new Query (getCtx(), table, "LBR_MDFe_ID=?", get_TrxName());
	 		  query.setParameters(new Object[]{getLBR_MDFe_ID()});
	 	//
	 	List<MLBRMDFeDriverInstance> list = query.list();
	 	return list.toArray(new MLBRMDFeDriverInstance[list.size()]);
	}	//	getDriver
	

	/**
	 *  Get Driver
	 *  @return MLBRMDFeToll[] lines
	 */
	public MLBRMDFeToll[] getToll ()
	{
		MTable table = MTable.get (getCtx(), MLBRMDFeToll.Table_Name);
		Query query =  new Query (getCtx(), table, "LBR_MDFe_ID=?", get_TrxName());
	 		  query.setParameters(new Object[]{getLBR_MDFe_ID()});
	 	//
	 	List<MLBRMDFeToll> list = query.list();
	 	return list.toArray(new MLBRMDFeToll[list.size()]);
	}	//	getToll

	/**
	 * 	Status
	 */
	@Override
	public int customizeValidActions (String docStatus, Object processing,
			String orderType, String isSOTrx, int AD_Table_ID, String[] docAction,
			String[] options, int index)
	{
		if (DOCSTATUS_Completed.equals(docStatus))
			options[index++] = DOCACTION_Void;
		
		else if (DOCSTATUS_WaitingConfirmation.equals(docStatus))
		{
			options[0] = DOCACTION_Complete;
			options[1] = null;
			options[2] = null;
			options[3] = null;
			options[4] = null;
			index=1;
		}
		//
		return index;
	}	//	docStatus
}	//	MLBRMDFe
